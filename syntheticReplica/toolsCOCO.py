# AUTOGENERATED! DO NOT EDIT! File to edit: 06_toolsCOCO.ipynb (unless otherwise specified).

__all__ = ['addAnnotDict', 'addImagesDict', 'addCatDict']

# Cell
from PIL import Image
from .display import *
from pathlib import Path

"""
To create a minimum COCO format datasets, we need to provide data of:
1) image: file name, id, height, width
2) category: supercategory, id, name
3) annotation: segmentation points, iscrowd, area, image_id, bbox, category_id, id

Note:
"iscrowd": 0 if your segmentation based on polygon (object instance)
"iscrowd": 1 if your segmentation based uncompressed RLE (crowd)
Reference: https://github.com/cocodataset/cocoapi/issues/135
"""

# Convert annotations data(in different datatypes) to dictionary
# Ordered keys
def addAnnotDict(segmentation:list,
                       iscrowd:int,
                       area:float,
                       image_id:int,
                       bbox:list,
                       category_id:int,
                       id:int) -> dict:

    return {"annotations": [{"segmentation": segmentation,
                             "iscrowd": iscrowd,
                             "area": area,
                             "image_id":image_id,
                             "bbox": bbox,
                             "category_id": category_id,
                             "id": id}]}

# Convert image meta-data to dictionary
def addImagesDict(path_dir:Path, # path to image folder
                  fileName:str,  # image file name
                  image_id:int) -> dict:
            img_path = Path(path_dir).joinpath(fileName)
            image = imageSize(img_path)
            width, height = image[0], image[1]

            return {"images": [{"file_name": fileName,
                                "id": image_id,
                                "height": height,
                                "width": width}]}
# Covert category data to  dictionary
def addCatDict(supercategory:str,
               category_id:int,
               category_name:str) -> dict:
    return {"categories": [{"supercategory": supercategory,
                            "id": category_id,
                            "name": category_name}]}
